// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/items.proto

package genv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/shelojara/collection-api/proto/gen/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ItemsName is the fully-qualified name of the Items service.
	ItemsName = "v1.Items"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ItemsGetItemProcedure is the fully-qualified name of the Items's GetItem RPC.
	ItemsGetItemProcedure = "/v1.Items/GetItem"
	// ItemsImportGameProcedure is the fully-qualified name of the Items's ImportGame RPC.
	ItemsImportGameProcedure = "/v1.Items/ImportGame"
	// ItemsSearchItemsProcedure is the fully-qualified name of the Items's SearchItems RPC.
	ItemsSearchItemsProcedure = "/v1.Items/SearchItems"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	itemsServiceDescriptor           = v1.File_v1_items_proto.Services().ByName("Items")
	itemsGetItemMethodDescriptor     = itemsServiceDescriptor.Methods().ByName("GetItem")
	itemsImportGameMethodDescriptor  = itemsServiceDescriptor.Methods().ByName("ImportGame")
	itemsSearchItemsMethodDescriptor = itemsServiceDescriptor.Methods().ByName("SearchItems")
)

// ItemsClient is a client for the v1.Items service.
type ItemsClient interface {
	GetItem(context.Context, *connect.Request[v1.GetItemRequest]) (*connect.Response[v1.Item], error)
	ImportGame(context.Context, *connect.Request[v1.ImportGameRequest]) (*connect.Response[v1.ImportGameResponse], error)
	SearchItems(context.Context, *connect.Request[v1.SearchItemsRequest]) (*connect.Response[v1.SearchItemsResponse], error)
}

// NewItemsClient constructs a client for the v1.Items service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewItemsClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ItemsClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &itemsClient{
		getItem: connect.NewClient[v1.GetItemRequest, v1.Item](
			httpClient,
			baseURL+ItemsGetItemProcedure,
			connect.WithSchema(itemsGetItemMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		importGame: connect.NewClient[v1.ImportGameRequest, v1.ImportGameResponse](
			httpClient,
			baseURL+ItemsImportGameProcedure,
			connect.WithSchema(itemsImportGameMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		searchItems: connect.NewClient[v1.SearchItemsRequest, v1.SearchItemsResponse](
			httpClient,
			baseURL+ItemsSearchItemsProcedure,
			connect.WithSchema(itemsSearchItemsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// itemsClient implements ItemsClient.
type itemsClient struct {
	getItem     *connect.Client[v1.GetItemRequest, v1.Item]
	importGame  *connect.Client[v1.ImportGameRequest, v1.ImportGameResponse]
	searchItems *connect.Client[v1.SearchItemsRequest, v1.SearchItemsResponse]
}

// GetItem calls v1.Items.GetItem.
func (c *itemsClient) GetItem(ctx context.Context, req *connect.Request[v1.GetItemRequest]) (*connect.Response[v1.Item], error) {
	return c.getItem.CallUnary(ctx, req)
}

// ImportGame calls v1.Items.ImportGame.
func (c *itemsClient) ImportGame(ctx context.Context, req *connect.Request[v1.ImportGameRequest]) (*connect.Response[v1.ImportGameResponse], error) {
	return c.importGame.CallUnary(ctx, req)
}

// SearchItems calls v1.Items.SearchItems.
func (c *itemsClient) SearchItems(ctx context.Context, req *connect.Request[v1.SearchItemsRequest]) (*connect.Response[v1.SearchItemsResponse], error) {
	return c.searchItems.CallUnary(ctx, req)
}

// ItemsHandler is an implementation of the v1.Items service.
type ItemsHandler interface {
	GetItem(context.Context, *connect.Request[v1.GetItemRequest]) (*connect.Response[v1.Item], error)
	ImportGame(context.Context, *connect.Request[v1.ImportGameRequest]) (*connect.Response[v1.ImportGameResponse], error)
	SearchItems(context.Context, *connect.Request[v1.SearchItemsRequest]) (*connect.Response[v1.SearchItemsResponse], error)
}

// NewItemsHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewItemsHandler(svc ItemsHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	itemsGetItemHandler := connect.NewUnaryHandler(
		ItemsGetItemProcedure,
		svc.GetItem,
		connect.WithSchema(itemsGetItemMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	itemsImportGameHandler := connect.NewUnaryHandler(
		ItemsImportGameProcedure,
		svc.ImportGame,
		connect.WithSchema(itemsImportGameMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	itemsSearchItemsHandler := connect.NewUnaryHandler(
		ItemsSearchItemsProcedure,
		svc.SearchItems,
		connect.WithSchema(itemsSearchItemsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1.Items/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ItemsGetItemProcedure:
			itemsGetItemHandler.ServeHTTP(w, r)
		case ItemsImportGameProcedure:
			itemsImportGameHandler.ServeHTTP(w, r)
		case ItemsSearchItemsProcedure:
			itemsSearchItemsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedItemsHandler returns CodeUnimplemented from all methods.
type UnimplementedItemsHandler struct{}

func (UnimplementedItemsHandler) GetItem(context.Context, *connect.Request[v1.GetItemRequest]) (*connect.Response[v1.Item], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.Items.GetItem is not implemented"))
}

func (UnimplementedItemsHandler) ImportGame(context.Context, *connect.Request[v1.ImportGameRequest]) (*connect.Response[v1.ImportGameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.Items.ImportGame is not implemented"))
}

func (UnimplementedItemsHandler) SearchItems(context.Context, *connect.Request[v1.SearchItemsRequest]) (*connect.Response[v1.SearchItemsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.Items.SearchItems is not implemented"))
}
